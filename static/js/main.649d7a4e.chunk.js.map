{"version":3,"sources":["Components/Home/Home.js","Components/EnterItem/EnterItem.js","Components/CreateCase/CreateCase.js","Components/CreateCase/EditCase.js","Components/Login/Login.js","routes/routes.js","services/history.js","App.js","serviceWorker.js","index.js"],"names":["Home","useState","storage","localStorage","getItem","JSON","parse","objectList","history","useHistory","useEffect","console","log","itemDisplay","length","map","object","index","key","className","id","onClick","push","pathname","state","caseID","caseItems","attachments","to","EnterItem","title","itemIndex","totalCount","handleRemove","description","editValues","descRef","useRef","titleRef","inputRef","progressColor","setProgressColor","editTitle","editDescription","editAttachments","attached","setAttached","removeAttached","event","target","newList","filter","item","blurHandler","desc","current","textContent","file","data-index","name","size","toFixed","type","split","htmlFor","ref","style","cursor","multiple","onChange","uploadFile","files","onBlur","contentEditable","suppressContentEditableWarning","color","fontSize","CreateCase","existingIDs","caseObject","setCaseObject","control","setDescription","setTitle","completed","itemList","setItemList","removeQuery","setRemoveQuery","getDescription","descObj","getTitle","titleObj","getAttached","array","Array","from","removeHandler","removeKey","setItem","stringify","goBack","total","find","alert","reduce","acc","val","created","EditCase","location","useLocation","storedObject","editObject","setEditObject","newStorage","Login","Routes","path","exact","component","createBrowserHistory","App","document","createElement","rel","href","head","append","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.649d7a4e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { NavLink, useHistory } from \"react-router-dom\";\nimport \"./Home.scss\";\n\nexport default function Home() {\n  const [objectList, setObjectList] = useState(() => {\n    const storage = localStorage.getItem(\"caseObject\");\n    return storage ? JSON.parse(storage) : [];\n  });\n  const history = useHistory();\n  useEffect(() => console.log(\"objeclist\", objectList), [objectList]);\n  let itemDisplay = [];\n  if (objectList.length > 0) {\n    itemDisplay = objectList.map((object, index) => (\n      <div key={index} className=\"list-item\">\n        <div className=\"item-container\">\n          <div\n            id=\"item-icon\"\n            onClick={() =>\n              history.push({\n                pathname: \"/edit-case\",\n                state: objectList[index],\n              })\n            }\n          >\n            <i className=\"fas fa-pen\"></i>\n          </div>\n          <div className=\"item-text\">\n            <h3>{object.caseID}</h3>\n            <h4>\n              {object.caseItems.length} Items, {object.attachments}\n              Attachments\n            </h4>\n            <h4>Date Created 14/02/2020</h4>\n          </div>\n          <h2>\n            •{index + 1}/{objectList.length}\n          </h2>\n        </div>\n      </div>\n    ));\n  }\n\n  return (\n    <div id=\"mobile\">\n      <div id=\"header\" className=\"primary\">\n        <div id=\"title\">\n          <h1>Case List</h1>\n        </div>\n      </div>\n      <div id=\"middle\">{itemDisplay}</div>\n      <div id=\"footer\" className=\"down footer-home\">\n        <div className=\"navbar-option\">\n          <NavLink to=\"/create-new\">\n            <i className=\"fas fa-folder-plus\"></i>\n            <h3>Create</h3>\n          </NavLink>\n        </div>\n        <div className=\"navbar-option\">\n          <NavLink to=\"/parsend\">\n            <i className=\"fas fa-list\"></i>\n            <h3>Cases</h3>\n          </NavLink>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./EnterItem.scss\";\n\nfunction EnterItem({\n  title,\n  itemIndex,\n  totalCount,\n  handleRemove,\n  description,\n  attachments,\n  editValues,\n}) {\n  //INITIAL SECTION                                      ////////////////////////////////////\n\n  //References used to fetch input values\n  const descRef = useRef(\"\");\n  const titleRef = useRef(\"\");\n  const inputRef = useRef(\"\");\n\n  //porgressColor will define the set/unset state of the items by color\n  const [progressColor, setProgressColor] = useState(\"unset\");\n\n  //this component is present in multiple parents. These definitions are to separate the edit and create functionalities of this component.\n  let editTitle = \"\";\n  let editDescription = \"\";\n  let editAttachments = [];\n  if (editValues) {\n    editTitle = editValues.title ? editValues.title : \"\";\n    editDescription = editValues.description ? editValues.description : \"\";\n    if (editValues.attachments) {\n      editAttachments = editValues.attachments;\n    }\n  }\n\n  const [attached, setAttached] = useState(editAttachments);\n  //REMOVE SECTION                                      ////////////////////////////////////\n\n  //define remove selection and remove\n  function removeHandler() {\n    handleRemove(itemIndex);\n  }\n  function removeAttached(event) {\n    console.log(\"event.target\", event.target.id);\n    if (attached.length > 1) {\n      let newList = attached.filter((item, index) => index != event.target.id);\n      setAttached(newList);\n    } else {\n      setAttached([]);\n      setProgressColor(\"unset\");\n    }\n  }\n\n  //UPDATE SECTION                                      ////////////////////////////////////\n\n  //if there are attachments update class\n  useEffect(() => {\n    if (editAttachments.length > 0) {\n      setProgressColor(\"set\");\n    } else {\n      return;\n    }\n  }, [editAttachments]);\n\n  function blurHandler(event) {\n    //onBlur; a.k.a when clicked outside the zone of description, the desc prop will be updated with the text input\n    //later to be put in the case object upon submit.\n    if (event.target.id === \"description-input\") {\n      description({\n        desc: descRef.current.textContent,\n        itemIndex: itemIndex,\n      });\n    } else if (event.target.id === \"title-input\") {\n      title({\n        title: titleRef.current.textContent,\n        itemIndex: itemIndex,\n      });\n    }\n  }\n\n  function uploadHandler() {\n    const uploadFile = inputRef.current;\n    if (uploadFile.files.length > 0) {\n      //FileList is not an array, but it is iterable. We use spread op to get it as an array.\n      setAttached([...uploadFile.files]);\n      setProgressColor(\"set\");\n    }\n  }\n\n  useEffect(() => {\n    console.log(\"attached\", attached);\n    //here we assign the uploaded files into the attachments property, later to be put in the case object upon submit.\n    attachments({ attached: attached, itemIndex: itemIndex });\n  }, [attached]);\n\n  return (\n    <div className={`item-content ${progressColor}`}>\n      <div className=\"item-container\">\n        {attached.map((file, index) => (\n          <div data-index={index} key={index} className=\"attached\">\n            <div className=\"remove-name\">\n              <h3 key={index + 1}>{file.name}</h3>\n              <div\n                id=\"remove-attached\"\n                className=\"remove-item\"\n                onClick={removeAttached}\n              >\n                <h2 id={index}>remove</h2>\n              </div>\n            </div>\n            <h4 key={index + 2}>\n              {(file.size / 1000).toFixed(2)}mb - {file.type.split(\"/\")[1]}\n            </h4>\n          </div>\n        ))}\n        <div className=\"add-section\">\n          <label htmlFor={itemIndex}>\n            <div className=\"add-button\">\n              <i className=\"fas fa-plus\"></i>\n            </div>\n          </label>\n\n          <input\n            ref={inputRef}\n            id={itemIndex}\n            className=\"upload-file\"\n            type=\"file\"\n            style={{ cursor: \"pointer\" }}\n            multiple\n            onChange={uploadHandler}\n          />\n          <div className=\"add-text\">\n            <div id=\"add-title\">\n              <div\n                id=\"title-input\"\n                ref={titleRef}\n                onBlur={blurHandler}\n                contentEditable\n                suppressContentEditableWarning={true}\n              >\n                {editTitle}\n              </div>\n              <h3 className={progressColor}>Title</h3>\n            </div>\n          </div>\n          <div className=\"item-counter\">\n            <h2>\n              •{itemIndex + 1}/{totalCount}\n            </h2>\n          </div>\n          <div className=\"remove-item\" onClick={removeHandler}>\n            <h2 style={{ color: \"#FD7422\", fontSize: \"14px\" }}>remove</h2>\n          </div>\n        </div>\n\n        <div className=\"description\">\n          <div\n            ref={descRef}\n            id=\"description-input\"\n            onBlur={blurHandler}\n            contentEditable\n            suppressContentEditableWarning={true}\n          >\n            {editDescription}\n          </div>\n          <h3 className={progressColor}>Description</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EnterItem;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { NavLink, useHistory, useLocation } from \"react-router-dom\";\nimport EnterItem from \"../EnterItem/EnterItem\";\nimport \"./CreateCase.scss\";\n\nexport default function CreateCase() {\n  //INITIAL DECLARATION                                      ////////////////////////////////////\n\n  //storage is to upload every new caseObject to localStorage\n  let storage = localStorage.getItem(\"caseObject\")\n    ? JSON.parse(localStorage.getItem(\"caseObject\"))\n    : [];\n  let existingIDs = localStorage.getItem(\"caseIDs\")\n    ? JSON.parse(localStorage.getItem(\"caseIDs\"))\n    : [];\n  //setting a dynamic caseID state for later use this will be edited by input\n  const [caseID, setCaseID] = useState(() => {\n    if (existingIDs.length > 0) {\n      return existingIDs[existingIDs.length - 1] + 1;\n    } else {\n      return 1;\n    }\n  });\n  const [caseObject, setCaseObject] = useState();\n  //useHistory hook needed to navigate onclick of a button and pass an object synchronously.\n  let history = useHistory();\n\n  //control is created to control on mount to rendering.\n  const control = useRef(false);\n\n  const [description, setDescription] = useState({});\n  const [title, setTitle] = useState({});\n  const [attached, setAttached] = useState({});\n  //setting an itemList state for the items in the case\n  const [itemList, setItemList] = useState([\n    {\n      title: \"\",\n      description: \"\",\n      attachments: [],\n      completed: false,\n    },\n  ]);\n  //removeQuery will trigger useEffect and eventually handle removing selected items\n  const [removeQuery, setRemoveQuery] = useState(null);\n\n  //ADDING SECTION                                      ////////////////////////////////////\n\n  function addField() {\n    setItemList([\n      ...itemList,\n      {\n        title: \"\",\n        description: \"\",\n        attachments: [],\n        completed: false,\n      },\n    ]);\n  }\n\n  //UPDATING SECTION                                      ////////////////////////////////////\n\n  //GET DESCRIPTION from component and update state\n  const getDescription = (descObj) => {\n    setDescription(descObj);\n  };\n  useEffect(() => {\n    const newList = itemList.map((item, index) => {\n      if (index === description.itemIndex) {\n        return { ...item, description: description.desc };\n      } else {\n        return item;\n      }\n    });\n    console.log(\"desc triggered\", newList);\n    setItemList(newList);\n  }, [description]);\n\n  useEffect(() => console.log(\"itemlist\", itemList), [itemList]);\n\n  //GET TITLE from component and update state\n\n  const getTitle = (titleObj) => {\n    setTitle(titleObj);\n  };\n  useEffect(() => {\n    const newList = itemList.map((item, index) => {\n      if (index === title.itemIndex) {\n        return { ...item, title: title.title };\n      } else {\n        return item;\n      }\n    });\n    setItemList(newList);\n  }, [title]);\n\n  //GET ATTACHMENTS from component and update state\n\n  const getAttached = (attached) => {\n    setAttached(attached);\n  };\n  useEffect(() => {\n    const newList = itemList.map((item, index) => {\n      if (index === attached.itemIndex) {\n        //FILES API is not an existing array but it is a directory to the file. Here I create a new array of objects with needed props.\n        const array = Array.from(attached.attached).map((item) => {\n          return { name: item.name, size: item.size, type: item.type };\n        });\n        return { ...item, attachments: array };\n      } else {\n        return item;\n      }\n    });\n\n    setItemList(newList);\n  }, [attached]);\n\n  //REMOVING SECTION                                      ////////////////////////////////////\n\n  const removeHandler = (removeKey) => {\n    setRemoveQuery(removeKey);\n  };\n\n  useEffect(() => {\n    console.log(\"current Itemlist\", itemList);\n    //not possible to delete the first item\n    if (itemList.length > 1) {\n      setItemList(itemList.filter((item, index) => index !== removeQuery));\n    }\n    //to reset removekey at each click I nullify the value here\n    setRemoveQuery(null);\n  }, [removeQuery]);\n\n  //SUBMIT SECTION                                      ////////////////////////////////////\n\n  function submitHandler() {\n    if (existingIDs.find((id) => id === caseID)) {\n      alert(`CaseID ${caseID} already exists`);\n    } else {\n      //calculating total attachments in caseObject using reduce\n      let total;\n      if (itemList.length > 1) {\n        total = itemList.reduce(\n          (acc, val) => acc.attachments.length + val.attachments.length\n        );\n      } else {\n        total = itemList[0].attachments.length;\n      }\n      //setting caseObject with final values\n      console.log(\"final itemlist\", itemList);\n      control.current = true;\n      setCaseObject({\n        caseID: caseID,\n        caseItems: itemList,\n        created: true,\n        attachments: total,\n      });\n    }\n  }\n  useEffect(() => {\n    console.log(\"caseObject\", caseObject);\n    if (control.current) {\n      storage = [...storage, caseObject];\n      localStorage.setItem(\"caseObject\", JSON.stringify(storage));\n\n      existingIDs = [...existingIDs, caseID];\n      localStorage.setItem(\"caseIDs\", JSON.stringify(existingIDs));\n      history.push({\n        pathname: \"/parsend\",\n      });\n    }\n  }, [caseObject]);\n\n  return (\n    <div id=\"mobile\">\n      <div id=\"header\" className=\"primary\">\n        <div id=\"title\">\n          <h1>Case ID {caseID}</h1>\n        </div>\n      </div>\n      <div id=\"middle\">\n        {itemList.map((item, index) => (\n          <EnterItem\n            itemIndex={index}\n            title={getTitle}\n            description={getDescription}\n            attachments={getAttached}\n            totalCount={itemList.length}\n            handleRemove={removeHandler}\n            key={index}\n          />\n        ))}\n      </div>\n      <div id=\"add-section\">\n        <button id=\"add-field\" onClick={addField}>\n          Add Field\n        </button>\n      </div>\n      <div id=\"footer\" className=\"footer-create\">\n        <button className=\"button secondary\" onClick={() => history.goBack()}>\n          Return\n        </button>\n        <button className=\"button primary\" onClick={submitHandler}>\n          Create Case\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./CreateCase.scss\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport EnterItem from \"../EnterItem/EnterItem\";\n\nexport default function EditCase() {\n  const location = useLocation();\n  const history = useHistory();\n  let storage = JSON.parse(localStorage.getItem(\"caseObject\"));\n  let storedObject = JSON.parse(localStorage.getItem(\"caseObject\")).find(\n    (item) => item.caseID === location.state.caseID\n  );\n  console.log(\"stored object\", storedObject);\n  console.log(\"storedTitle\", storedObject.caseItems[0].title);\n\n  const [editObject, setEditObject] = useState(storedObject);\n  const [itemList, setItemList] = useState(storedObject.caseItems);\n\n  const [title, setTitle] = useState({});\n  const [description, setDescription] = useState({});\n  const [attached, setAttached] = useState({});\n\n  //removeQuery will trigger useEffect and eventually handle removing selected items\n  const [removeQuery, setRemoveQuery] = useState(null);\n\n  //control is created to control on mount to rendering.\n  const control = useRef(false);\n\n  //UPDATE SECTION                                      ////////////////////////////////////\n\n  //GET DESCRIPTION from component and update state\n  const getDescription = (descObj) => {\n    setDescription(descObj);\n  };\n  useEffect(() => {\n    let newList = itemList.map((item, index) => {\n      if (index === description.itemIndex) {\n        return { ...item, description: description.desc };\n      } else {\n        return item;\n      }\n    });\n    console.log(\"desc triggered\", newList);\n    setItemList(newList);\n  }, [description]);\n\n  //GET TITLE from component and update state\n  const getTitle = (titleObj) => {\n    setTitle(titleObj);\n  };\n  useEffect(() => {\n    let newList = itemList.map((item, index) => {\n      if (index === title.itemIndex) {\n        return { ...item, title: title.title };\n      } else {\n        return item;\n      }\n    });\n    setItemList(newList);\n  }, [title]);\n\n  //GET ATTACHMENTS from component and update state\n\n  const getAttached = (attached) => {\n    setAttached(attached);\n  };\n  useEffect(() => {\n    const newList = itemList.map((item, index) => {\n      if (index === attached.itemIndex) {\n        //FILES API is not an existing array but it is a directory to the file. Here I create a new array of objects with needed props.\n        const array = Array.from(attached.attached).map((item) => {\n          return { name: item.name, size: item.size, type: item.type };\n        });\n        return { ...item, attachments: array };\n      } else {\n        return item;\n      }\n    });\n    setItemList(newList);\n  }, [attached]);\n\n  //ADD SECTION                                      ////////////////////////////////////\n\n  function addField() {\n    setItemList([\n      ...itemList,\n      {\n        title: \"\",\n        description: \"\",\n        attachments: [],\n        completed: false,\n      },\n    ]);\n    console.log(\"add handled\");\n  }\n\n  //REMOVE SECTION                                      ////////////////////////////////////\n\n  const removeHandler = (removeKey) => {\n    setRemoveQuery(removeKey);\n  };\n\n  useEffect(() => {\n    console.log(\"current Itemlist\", itemList);\n    //not possible to delete the first item\n    if (itemList.length > 1) {\n      setItemList(itemList.filter((item, index) => index !== removeQuery));\n    }\n    //to reset removekey at each click I nullify the value here\n    setRemoveQuery(null);\n  }, [removeQuery]);\n\n  useEffect(() => console.log(\"itemlist\", itemList), [itemList]);\n\n  //SUBMIT SECTION                                      ////////////////////////////////////\n\n  function submitHandler() {\n    let total;\n    if (itemList.length > 1) {\n      total = itemList.reduce(\n        (acc, val) => acc.attachments.length + val.attachments.length\n      );\n    } else {\n      total = itemList[0].attachments.length;\n    }\n    control.current = true;\n    setEditObject({ ...storedObject, caseItems: itemList, attachments: total });\n  }\n\n  useEffect(() => {\n    if (control.current) {\n      let newStorage = storage.map((item) => {\n        if (item.caseID === editObject.caseID) {\n          return editObject;\n        } else {\n          return item;\n        }\n      });\n      localStorage.setItem(\"caseObject\", JSON.stringify(newStorage));\n      history.push({\n        pathname: \"/parsend\",\n      });\n      console.log(\"newStorage\", newStorage);\n    }\n  }, [editObject]);\n\n  return (\n    <div id=\"mobile\">\n      <div id=\"header\" className=\"primary\">\n        <div id=\"title\">\n          <h1>Case ID {editObject.caseID}</h1>\n        </div>\n      </div>\n      <div id=\"middle\">\n        {itemList.map((item, index) => (\n          <EnterItem\n            itemIndex={index}\n            title={getTitle}\n            description={getDescription}\n            attachments={getAttached}\n            totalCount={itemList.length}\n            handleRemove={removeHandler}\n            editValues={{\n              description: item.description,\n              title: item.title,\n              attachments: item.attachments,\n            }}\n            key={index}\n          />\n        ))}\n      </div>\n      <div id=\"add-section\">\n        <button id=\"add-field\" onClick={addField}>\n          Add Field\n        </button>\n      </div>\n      <div id=\"footer\" className=\"footer-create\">\n        <button className=\"button secondary\" onClick={() => history.goBack()}>\n          Return\n        </button>\n        <button className=\"button primary\" onClick={submitHandler}>\n          Save Case\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Login() {\n  return (\n    <div id=\"mobile\">\n      <div id=\"header\"></div>\n      <div id=\"middle\"></div>\n      <div id=\"footer\"></div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Home from \"../Components/Home/Home\";\nimport CreateCase from \"../Components/CreateCase/CreateCase\";\nimport EditCase from \"../Components/CreateCase/EditCase\";\nimport Login from \"../Components/Login/Login\";\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/parsend-login\" exact component={Login}></Route>\n        <Route path=\"/parsend\" exact component={Home}></Route>\n        <Route path=\"/create-new\" exact component={CreateCase}></Route>\n        <Route path=\"/edit-case\" exact component={EditCase}></Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import React, { useEffect } from \"react\";\nimport \"./App.scss\";\nimport { Router } from \"react-router-dom\";\nimport Routes from \"./routes/routes\";\nimport history from \"./services/history\";\nfunction App() {\n  //add fontawesome cdn\n  useEffect(() => {\n    const style = document.createElement(\"link\");\n    style.rel = `stylesheet`;\n    style.href = `https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css`;\n    document.head.append(style);\n  }, []);\n\n  return (\n    <div id=\"root\">\n      <Router history={history}>\n        <Routes />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}