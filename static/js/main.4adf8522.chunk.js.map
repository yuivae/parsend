{"version":3,"sources":["Components/EnterItem.js","Components/Mobile.js","App.js","serviceWorker.js","index.js"],"names":["EnterItem","itemNo","totalCount","handleRemove","className","style","cursor","onClick","data-placeholder","contentEditable","Mobile","useState","caseID","itemList","setItemList","itemRef","useRef","removeHandler","splice","console","log","id","map","item","index","ref","key","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MA2BeA,MAzBf,YAA0D,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aACvC,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,eACb,4BAAQA,UAAU,eAClB,yBAAKA,UAAU,YACb,wCACA,uBAAGC,MAAO,CAAEC,OAAQ,YAApB,uBAEF,yBAAKF,UAAU,gBACZH,EADH,IACYC,GAEZ,yBAAKE,UAAU,cAAcG,QAASJ,KAExC,yBACEC,UAAU,cACVI,mBAAiB,cACjBC,iBAAe,OC0BVC,MA3Cf,WAAkB,MAEYC,mBAAS,SAFrB,mBAETC,EAFS,aAGgBD,mBAAS,CAAC,KAH1B,mBAGTE,EAHS,KAGCC,EAHD,KAIVC,EAAUC,mBAMhB,SAASC,IAEPH,EAAYD,EAASK,OAAOL,EAASE,GAAU,EAAG,IAClDI,QAAQC,IAAIP,GAGd,OACE,yBAAKQ,GAAG,UACN,yBAAKA,GAAG,UACN,yBAAKA,GAAG,SACN,uCAAaT,KAGjB,yBAAKS,GAAG,UACLR,EAASS,KAAI,SAACC,EAAMC,GAAP,OACZ,kBAAC,EAAD,CACEC,IAAKV,EACLW,IAAKF,EACLvB,OAAQuB,EAAQ,EAChBtB,WAAYW,EAASc,OACrBxB,aAAcc,QAIpB,yBAAKI,GAAG,UACN,4BAAQA,GAAG,YAAYd,QA9B7B,WAEEO,EAAY,GAAD,mBAAKD,GAAL,CAAeA,EAASc,UACnCR,QAAQC,IAAIP,KA2BR,aAGA,4BAAQQ,GAAG,UAAX,a,MC7BOO,MARf,WACE,OACE,yBAAKP,GAAG,QACN,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.4adf8522.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction EnterItem({ itemNo, totalCount, handleRemove }) {\n  return (\n    <div className=\"item-content\">\n      <div className=\"item-container\">\n        <div className=\"add-section\">\n          <button className=\"add-button\"></button>\n          <div className=\"add-text\">\n            <h2>Add file</h2>\n            <p style={{ cursor: \"pointer\" }}>or select a folder</p>\n          </div>\n          <div className=\"item-counter\">\n            {itemNo}/{totalCount}\n          </div>\n          <div className=\"remove-item\" onClick={handleRemove}></div>\n        </div>\n        <div\n          className=\"description\"\n          data-placeholder=\"Description\"\n          contentEditable\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default EnterItem;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport EnterItem from \"./EnterItem\";\n\nfunction Mobile() {\n  //setting a dynamic case state\n  const [caseID, setCaseID] = useState(\"#1924\");\n  const [itemList, setItemList] = useState([0]);\n  const itemRef = useRef();\n  function addField() {\n    //creates an array with item numbers. Problem: first click returns the same initial array\n    setItemList([...itemList, itemList.length]);\n    console.log(itemList);\n  }\n  function removeHandler() {\n    //removes the selected component. Problem: can not identify the selected component\n    setItemList(itemList.splice(itemList[itemRef], 1, 0));\n    console.log(itemList);\n  }\n\n  return (\n    <div id=\"mobile\">\n      <div id=\"header\">\n        <div id=\"title\">\n          <h1>Case ID {caseID}</h1>\n        </div>\n      </div>\n      <div id=\"middle\">\n        {itemList.map((item, index) => (\n          <EnterItem\n            ref={itemRef}\n            key={index}\n            itemNo={index + 1}\n            totalCount={itemList.length}\n            handleRemove={removeHandler}\n          />\n        ))}\n      </div>\n      <div id=\"footer\">\n        <button id=\"add-field\" onClick={addField}>\n          Add Field\n        </button>\n        <button id=\"submit\">Submit</button>\n      </div>\n    </div>\n  );\n}\nexport default Mobile;\n","import React from \"react\";\nimport Mobile from \"./Components/Mobile\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div id=\"root\">\n      <Mobile />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}