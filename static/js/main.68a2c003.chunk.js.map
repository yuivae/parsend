{"version":3,"sources":["Components/MenuBar.js","Components/EnterItem.js","Components/Mobile.js","pages/Homepage.js","Components/CaseCard.js","pages/Case History.js","routes/routes.js","services/history.js","App.js","serviceWorker.js","index.js"],"names":["MenuBar","id","href","EnterItem","itemNo","totalCount","handleRemove","itemKey","className","style","cursor","onClick","console","log","data-placeholder","contentEditable","Mobile","useState","caseID","itemList","setItemList","removeQuery","setRemoveQuery","useEffect","removeHandler","removeKey","length","filter","item","index","map","Homepage","CaseCard","CaseHistory","Routes","path","exact","component","history","createBrowserHistory","App","document","createElement","rel","head","append","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68a2c003.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction MenuBar() {\n  return (\n    <div id=\"menu-bar\">\n      <div id=\"menu-header\">\n        <h1>Your Profile</h1>\n      </div>\n      <div id=\"menu-middle\">\n        <li>\n          <a href=\"/parsend\">\n            <h2>New Case</h2>\n          </a>\n        </li>\n        <li>\n          <a href=\"/case-history\">\n            <h2>Case History</h2>\n          </a>\n        </li>\n      </div>\n      <div id=\"menu-footer\">\n        <li>\n          <a href=\"#\">\n            <h2>Settings</h2>\n          </a>\n        </li>\n      </div>\n    </div>\n  );\n}\n\nexport default MenuBar;\n","import React, { useState } from \"react\";\n\nfunction EnterItem({ itemNo, totalCount, handleRemove }) {\n  let itemKey = itemNo - 1;\n  function removeHandler() {\n    console.log(\"index \", itemKey);\n    handleRemove(itemKey);\n  }\n  return (\n    <div className=\"item-content\">\n      <div className=\"item-container\">\n        <div className=\"add-section\">\n          <button className=\"add-button\">\n            <i className=\"fas fa-plus\"></i>\n          </button>\n          <div className=\"add-text\">\n            <h2>Add file</h2>\n            <p style={{ cursor: \"pointer\" }}>or select a folder</p>\n          </div>\n          <div className=\"item-counter\">\n            <h2>\n              {itemNo}/{totalCount}\n            </h2>\n          </div>\n          <div className=\"remove-item\" onClick={removeHandler}>\n            <i className=\"fas fa-times\"></i>\n          </div>\n        </div>\n        <div\n          className=\"description\"\n          data-placeholder=\"Description\"\n          contentEditable\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default EnterItem;\n","import React, { useState, useEffect } from \"react\";\nimport EnterItem from \"./EnterItem\";\n\nfunction Mobile() {\n  //setting a dynamic caseID state for later use this will be edited by input\n  const [caseID, setCaseID] = useState(\"#1924\");\n\n  //setting an itemList state for the items in the case, using an arrow function so the initial state gets to be set only onLoad\n  const [itemList, setItemList] = useState([\n    {\n      itemNo: 1,\n    },\n  ]);\n  //removeQuery will trigger useEffect and eventually handle removing selected items\n  const [removeQuery, setRemoveQuery] = useState(null);\n\n  function addField() {\n    setItemList([\n      ...itemList,\n      {\n        itemNo: itemList[itemList.length - 1].itemNo + 1,\n      },\n    ]);\n  }\n  useEffect(() => console.log(\"itemList: \", itemList), [itemList]);\n\n  //removeHandler creates a removeKey and uses it to set removeQuery.\n\n  const removeHandler = (removeKey) => {\n    setRemoveQuery(removeKey);\n  };\n\n  useEffect(() => {\n    //not possible to delete the first item\n    if (itemList.length > 1) {\n      setItemList(itemList.filter((item, index) => index !== removeQuery));\n    }\n  }, [removeQuery]);\n\n  return (\n    <div id=\"mobile\">\n      <div id=\"header\">\n        <div id=\"title\">\n          <h1>Case ID {caseID}</h1>\n        </div>\n      </div>\n      <div id=\"middle\">\n        {itemList.map((item, index) => (\n          <EnterItem\n            itemNo={index + 1}\n            totalCount={itemList.length}\n            handleRemove={removeHandler}\n          />\n        ))}\n      </div>\n      <div id=\"footer\">\n        <button id=\"add-field\" onClick={addField}>\n          Add Field\n        </button>\n        <button id=\"submit\">Submit</button>\n      </div>\n    </div>\n  );\n}\nexport default Mobile;\n","import React from \"react\";\n\nimport Mobile from \"../Components/Mobile\";\nimport MenuBar from \"../Components/MenuBar\";\nexport default function Homepage() {\n  return (\n    <>\n      <MenuBar />\n      <Mobile />\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function CaseCard() {\n  return (\n    <div id=\"card-container\">\n      <div id=\"card-header\"></div>\n      <div id=\"card-middle\"></div>\n      <div id=\"card-footer\"></div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport MenuBar from \"../Components/MenuBar\";\n\nimport CaseCard from \"../Components/CaseCard\";\n\nexport default function CaseHistory() {\n  return (\n    <>\n      <MenuBar />\n      <CaseCard />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Homepage from \"../pages/Homepage\";\nimport CaseHistory from \"../pages/Case History\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/parsend\" exact component={Homepage}></Route>\n      <Route path=\"/case-history\" exact component={CaseHistory}></Route>\n    </Switch>\n  );\n}\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import React, { useEffect } from \"react\";\nimport MenuBar from \"./Components/MenuBar\";\nimport Mobile from \"./Components/Mobile\";\nimport \"./App.css\";\nimport { Router } from \"react-router-dom\";\nimport Routes from \"./routes/routes\";\nimport history from \"./services/history\";\nfunction App() {\n  //add fontawesome cdn\n  useEffect(() => {\n    const style = document.createElement(\"link\");\n    style.rel = `stylesheet`;\n    style.href = `https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css`;\n    document.head.append(style);\n  }, []);\n\n  return (\n    <div id=\"root\">\n      <Router history={history}>\n        <Routes />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}